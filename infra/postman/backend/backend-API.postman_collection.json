{
	"info": {
		"_postman_id": "e185815e-ef57-46e2-81ac-f34a6116f9b0",
		"name": "backend-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33455248"
	},
	"item": [
		{
			"name": "start",
			"item": [
				{
					"name": "healthcheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"backend healthy\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.jsonBody({\r",
									"        \"success\": true,\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/health",
							"host": [
								"{{url}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "auth-Connect",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User successly created or connected\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"current_user\", pm.variables.get(\"basic_user\"));\r",
									"pm.variables.unset(\"userIndex\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    {{current_user}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/me",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth-can_i_basic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User have access\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.jsonBody({\r",
									"        \"success\": true,\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let users = [\"basic_user\", \"admin_user\", \"maintainer_user\"];\r",
									"let index = pm.variables.get(\"userIndex\") || 0;\r",
									"\r",
									"pm.variables.set(\"current_user\", pm.variables.get(users[index]));\r",
									"\r",
									"index++;\r",
									"if (index < users.length) {\r",
									"    pm.variables.set(\"userIndex\", index);\r",
									"    pm.execution.setNextRequest(pm.execution.location.current);\r",
									"} else {\r",
									"    pm.variables.unset(\"userIndex\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    {{current_user}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/can_i_basic",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"can_i_basic"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth-can_i_admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.variables.get(\"maintainer_user\") === pm.variables.get(\"current_user\") || pm.variables.get(\"admin_user\") === pm.variables.get(\"current_user\"))\r",
									"    pm.test(\"User have access\", function (){\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.response.to.have.jsonBody({\r",
									"            \"success\": true,\r",
									"        });\r",
									"    });\r",
									"\r",
									"else\r",
									"    pm.test(\"User do not have access\", function (){\r",
									"        pm.response.to.have.status(401);\r",
									"        pm.response.to.have.jsonBody({\r",
									"            \"success\": false,\r",
									"        });\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let users = [\"basic_user\", \"admin_user\", \"maintainer_user\"];\r",
									"let index = pm.variables.get(\"userIndex\") || 0;\r",
									"\r",
									"pm.variables.set(\"current_user\", pm.variables.get(users[index]));\r",
									"\r",
									"index++;\r",
									"if (index < users.length) {\r",
									"    pm.variables.set(\"userIndex\", index);\r",
									"    pm.execution.setNextRequest(pm.execution.location.current);\r",
									"} else {\r",
									"    pm.variables.unset(\"userIndex\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    {{current_user}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/can_i_admin",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"can_i_admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth-can_i_maintainer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.variables.get(\"maintainer_user\") === pm.variables.get(\"current_user\"))\r",
									"    pm.test(\"User have access\", function (){\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.response.to.have.jsonBody({\r",
									"            \"success\": true,\r",
									"        });\r",
									"    });\r",
									"\r",
									"else\r",
									"    pm.test(\"User do not have access\", function (){\r",
									"        pm.response.to.have.status(401);\r",
									"        pm.response.to.have.jsonBody({\r",
									"            \"success\": false,\r",
									"        });\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let users = [\"basic_user\", \"admin_user\", \"maintainer_user\"];\r",
									"let index = pm.variables.get(\"userIndex\") || 0;\r",
									"\r",
									"pm.variables.set(\"current_user\", pm.variables.get(users[index]));\r",
									"\r",
									"index++;\r",
									"if (index < users.length) {\r",
									"    pm.variables.set(\"userIndex\", index);\r",
									"    pm.execution.setNextRequest(pm.execution.location.current);\r",
									"} else {\r",
									"    pm.variables.unset(\"userIndex\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    {{current_user}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/can_i_maintainer",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"can_i_maintainer"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "books",
			"item": [
				{
					"name": "books-new",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let urls = [\r",
									"    \"https://www.goodreds.com/book/show/1268479.Warbreaker\", \r",
									"    \"https://www.goodreads.com/bok/show/1268479.Warbreaker\", \r",
									"    \"https://www.goodreads.com/book/show/1268479.Warbreaker\",\r",
									"    \"https://www.goodreads.com/book/show/1268479.Warbreaker\",\r",
									"    \"https://www.goodreads.com/book/show/18043539-les-fianc-s-de-l-hiver\"];\r",
									"let index = pm.variables.get(\"userIndex\") || 0;\r",
									"\r",
									"pm.variables.set(\"book_url\", urls[index]);\r",
									"\r",
									"index++;\r",
									"if (index < urls.length) {\r",
									"    pm.variables.set(\"userIndex\", index);\r",
									"    pm.execution.setNextRequest(pm.execution.location.current);\r",
									"} else {\r",
									"    pm.variables.unset(\"userIndex\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch(pm.variables.get(\"userIndex\")){\r",
									"    case 1:\r",
									"        pm.test(\"Bad host\", function (){\r",
									"            pm.response.to.have.status(400);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": false,\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"    case 2:\r",
									"        pm.test(\"Bad path\", function (){\r",
									"            pm.response.to.have.status(400);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": false,\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"    case 3:\r",
									"        pm.test(\"Success\", function (){\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": true,\r",
									"                \"data\": {\r",
									"                    \"book_reference_url\": \"https://www.goodreads.com/book/show/1268479.Warbreaker\",\r",
									"                    \"book_name\": \"Warbreaker\"\r",
									"                },\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"    case 4:\r",
									"        pm.test(\"Fail on duplicate\", function (){\r",
									"            pm.response.to.have.status(400);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": false,\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"    default:\r",
									"        pm.test(\"Success\", function (){\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": true,\r",
									"                \"data\": {\r",
									"                    \"book_reference_url\": \"https://www.goodreads.com/book/show/18043539-les-fianc-s-de-l-hiver\",\r",
									"                    \"book_name\": \"Les Fiancés de l'hiver\"\r",
									"                },\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    {{basic_user}},\r\n    \"goodreads_url\": \"{{book_url}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/books/",
							"host": [
								"{{url}}"
							],
							"path": [
								"books",
								""
							]
						}
					},
					"response": [
						{
							"name": "success ex",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    {{basic_user}},\r\n    \"goodreads_url\": \"https://www.goodreads.com/book/show/1268479.Warbreaker\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/books/",
									"host": [
										"{{url}}"
									],
									"path": [
										"books",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "209"
								},
								{
									"key": "ETag",
									"value": "W/\"d1-7uEVRr0ySetPMlFsg8oSnjlUjZM\""
								},
								{
									"key": "Set-Cookie",
									"value": "connect.sid=s%3Aii4Fh3svWf7yQlAbgpAd-Gqvo5JmfORe.1QMN11YvBkUKcUClH70piQ5Y7stdwbyyaj%2Be4%2BheAFM; Path=/; HttpOnly"
								},
								{
									"key": "Date",
									"value": "Fri, 15 Aug 2025 15:40:44 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"See data for the new book informations\",\n    \"data\": {\n        \"book_id\": 3,\n        \"book_reference_url\": \"https://www.goodreads.com/book/show/1268479.Warbreaker\",\n        \"book_name\": \"Warbreaker\"\n    },\n    \"error_code\": null\n}"
						}
					]
				},
				{
					"name": "books-list_all",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Success\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.jsonBody({\r",
									"        \"success\": true,\r",
									"        \"data\": [\r",
									"            {\r",
									"                \"book_id\": 1,\r",
									"                \"book_name\": \"Warbreaker\",\r",
									"                \"book_reference_url\": \"https://www.goodreads.com/book/show/1268479.Warbreaker\"\r",
									"            },\r",
									"            {\r",
									"                \"book_id\": 2,\r",
									"                \"book_name\": \"Les Fiancés de l'hiver\",\r",
									"                \"book_reference_url\": \"https://www.goodreads.com/book/show/18043539-les-fianc-s-de-l-hiver\"\r",
									"            }\r",
									"        ],\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    {{basic_user}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/books",
							"host": [
								"{{url}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "books-remove",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let index = pm.variables.get(\"userIndex\") || 0;\r",
									"\r",
									"index++;\r",
									"if (index < 2) {\r",
									"    pm.variables.set(\"userIndex\", index);\r",
									"    pm.execution.setNextRequest(pm.execution.location.current);\r",
									"} else {\r",
									"    pm.variables.unset(\"userIndex\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch(pm.variables.get(\"userIndex\")){\r",
									"    case 1:\r",
									"        pm.test(\"Book removed\", function (){\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": true,\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"    default:\r",
									"        pm.test(\"Fail because already removed\", function (){\r",
									"            pm.response.to.have.status(400);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": false,\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    {{admin_user}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/books/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"books",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "logs",
			"item": [
				{
					"name": "logs-new",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let completions = [\r",
									"    3,\r",
									"    6,\r",
									"    4,\r",
									"    6];\r",
									"let index = pm.variables.get(\"userIndex\") || 0;\r",
									"\r",
									"pm.variables.set(\"completion\", completions[index]);\r",
									"\r",
									"index++;\r",
									"if (index < completions.length) {\r",
									"    pm.variables.set(\"userIndex\", index);\r",
									"    pm.execution.setNextRequest(pm.execution.location.current);\r",
									"} else {\r",
									"    pm.variables.unset(\"userIndex\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch(pm.variables.get(\"userIndex\")){\r",
									"    case 1:\r",
									"        pm.test(\"New log from empty\", function (){\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": true,\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"    case 2:\r",
									"        pm.test(\"New log from not empty\", function (){\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": true,\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"    case 3:\r",
									"        pm.test(\"New log from smaller\", function (){\r",
									"            pm.response.to.have.status(400);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": false,\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"    default:\r",
									"        pm.test(\"New log from equal\", function (){\r",
									"            pm.response.to.have.status(400);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": false,\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    {{basic_user}},\r\n    \"book_id\": 2,\r\n    \"completion\": {{completion}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/logs",
							"host": [
								"{{url}}"
							],
							"path": [
								"logs"
							]
						}
					},
					"response": []
				},
				{
					"name": "logs-list_all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Success\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.jsonBody({\r",
									"        \"success\": true,\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    {{basic_user}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/logs/2",
							"host": [
								"{{url}}"
							],
							"path": [
								"logs",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "logs-reset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Success\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.jsonBody({\r",
									"        \"success\": true,\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    {{basic_user}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/logs/reset/2",
							"host": [
								"{{url}}"
							],
							"path": [
								"logs",
								"reset",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "logs-delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let index = pm.variables.get(\"userIndex\") || 0;\r",
									"\r",
									"index++;\r",
									"if (index < 2) {\r",
									"    pm.variables.set(\"userIndex\", index);\r",
									"    pm.execution.setNextRequest(pm.execution.location.current);\r",
									"} else {\r",
									"    pm.variables.unset(\"userIndex\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch(pm.variables.get(\"userIndex\")){\r",
									"    case 1:\r",
									"        pm.test(\"Book removed\", function (){\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": true,\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"    default:\r",
									"        pm.test(\"Fail because already removed\", function (){\r",
									"            pm.response.to.have.status(400);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": false,\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    {{basic_user}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/logs/3",
							"host": [
								"{{url}}"
							],
							"path": [
								"logs",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "logs-completion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Success\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.jsonBody({\r",
									"        \"success\": true,\r",
									"        \"data\": 6\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    {{basic_user}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/logs/completion/2",
							"host": [
								"{{url}}"
							],
							"path": [
								"logs",
								"completion",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "transactions",
			"item": [
				{
					"name": "transactions-get",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Empty list of transaction\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.jsonBody({\r",
									"        \"success\": true,\r",
									"        \"data\": []\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    {{admin_user}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/transactions/green_gommette",
							"host": [
								"{{url}}"
							],
							"path": [
								"transactions",
								"green_gommette"
							]
						}
					},
					"response": []
				},
				{
					"name": "transactions-get_sum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Sum after adding transactions\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.jsonBody({\r",
									"        \"success\": true,\r",
									"        \"data\": 6\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    {{admin_user}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/transactions/sum/green_gommette",
							"host": [
								"{{url}}"
							],
							"path": [
								"transactions",
								"sum",
								"green_gommette"
							]
						}
					},
					"response": []
				},
				{
					"name": "transactions-make",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let amounts = [\r",
									"    -3,\r",
									"    3,\r",
									"    -3,\r",
									"    3,\r",
									"    3,\r",
									"    -2];\r",
									"let index = pm.variables.get(\"userIndex\") || 0;\r",
									"\r",
									"pm.variables.set(\"amount\", amounts[index]);\r",
									"\r",
									"index++;\r",
									"if (index < amounts.length) {\r",
									"    pm.variables.set(\"userIndex\", index);\r",
									"    pm.execution.setNextRequest(pm.execution.location.current);\r",
									"} else {\r",
									"    pm.variables.unset(\"userIndex\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch(pm.variables.get(\"userIndex\")){\r",
									"    case 1:\r",
									"        pm.test(\"Transaction with too much money\", function (){\r",
									"            pm.response.to.have.status(400);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": false,\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"    case 2:\r",
									"        pm.test(\"Add money\", function (){\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": true,\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"    case 3:\r",
									"        pm.test(\"Remove all money\", function (){\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": true,\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"    case 4:\r",
									"        pm.test(\"Add money\", function (){\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": true,\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"    case 5:\r",
									"        pm.test(\"Add money on currently on non zero\", function (){\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": true,\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"    default:\r",
									"        pm.test(\"Remove some money\", function (){\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.response.to.have.jsonBody({\r",
									"                \"success\": true,\r",
									"            });\r",
									"        });\r",
									"        break;\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    {{admin_user}},\r\n    \"amount\": {{amount}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/transactions/green_gommette",
							"host": [
								"{{url}}"
							],
							"path": [
								"transactions",
								"green_gommette"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account_balances",
			"item": [
				{
					"name": "account_balances-get",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Account updated\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.jsonBody({\r",
									"        \"success\": true,\r",
									"        \"data\": [\r",
									"            {\r",
									"                \"user_id\": 2,\r",
									"                \"account_currency_name\": \"green_gommette\",\r",
									"                \"amount\": 1\r",
									"            },\r",
									"            {\r",
									"                \"user_id\": 2,\r",
									"                \"account_currency_name\": \"red_gommette\",\r",
									"                \"amount\": 0\r",
									"            }\r",
									"        ],\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    {{admin_user}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/balances",
							"host": [
								"{{url}}"
							],
							"path": [
								"balances"
							]
						}
					},
					"response": []
				},
				{
					"name": "account_balances-update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"update balance\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.jsonBody({\r",
									"        \"success\": true\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    {{admin_user}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/balances/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"balances",
								"update"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "current_user",
			"value": ""
		},
		{
			"key": "basic_user",
			"value": "\"user\": {\n        \"discord_id\": 1,\n        \"role_name\": \"Basic\"\n    }"
		},
		{
			"key": "admin_user",
			"value": "\"user\":{\n        \"discord_id\": 2,\n        \"role_name\": \"Admin\"\n    }"
		},
		{
			"key": "maintainer_user",
			"value": "\"user\":{\r\n        \"discord_id\": 3,\r\n        \"role_name\": \"Maintainer\"\r\n    }"
		},
		{
			"key": "book_url",
			"value": "https://www.goodreads.com/book/show/1268479.Warbreaker"
		},
		{
			"key": "completion",
			"value": "3",
			"type": "default"
		},
		{
			"key": "amount",
			"value": "",
			"type": "default"
		}
	]
}